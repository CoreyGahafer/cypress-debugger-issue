{"version":3,"sources":["../src/install.ts","../src/browserLogs.ts","../src/constants.ts","../src/fs.ts"],"sourcesContent":["import { HttpArchiveLog } from '@currents/cypress-debugger-support';\nimport {\n  ensureBrowserFlags,\n  install as installHarPlugin,\n} from '@neuralegion/cypress-har-generator';\nimport path from 'path';\nimport {\n  browserLaunchHandler,\n  clearLogs,\n  getLogs,\n  recordLogs,\n} from './browserLogs';\nimport { createDir, readFile, removeDir, removeFile, writeFile } from './fs';\nimport { PluginOptions, TestExecutionResult } from './types';\n\nconst harDir = 'dump_har';\n\nconst createDumpFile = (data: TestExecutionResult, dumpDir: string): string => {\n  createDir(dumpDir);\n\n  const specDirPath = path.join(dumpDir, data.meta.spec);\n  createDir(specDirPath);\n\n  const filename = `${data.meta.test.join(' -- ')} (${data.meta.state})${\n    data.meta.retryAttempt > 0 ? ` (attempt ${data.meta.retryAttempt + 1})` : ''\n  }`;\n\n  const resultsPath = path.join(specDirPath, `${filename}.json`);\n  writeFile(resultsPath, JSON.stringify(data, null, 2));\n  return resultsPath;\n};\n\nconst getHar = (filename: string): HttpArchiveLog | null => {\n  try {\n    const filePath = path.join(harDir, filename);\n    const data = readFile(filePath);\n    const parsed = JSON.parse(data.toString('utf-8'));\n\n    removeFile(filePath);\n\n    return parsed;\n  } catch (error) {\n    return null;\n  }\n};\n\nfunction install(\n  on: Cypress.PluginEvents,\n  config: Cypress.PluginConfigOptions,\n  options?: PluginOptions\n) {\n  if (options?.failedTestsOnly) {\n    // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n    config.env.__cypress_debugger_failedTestsOnly = true;\n  }\n\n  on('task', {\n    // called in \"afterEach\" hook\n    dumpEvents(\n      data: Pick<TestExecutionResult, 'id' | 'cy' | 'rr' | 'meta'> & {\n        harFilename: string;\n      }\n    ) {\n      const har = getHar(data.harFilename);\n\n      const browserLogs = getLogs();\n      clearLogs();\n\n      const dumpData = {\n        id: data.id,\n        cy: data.cy,\n        rr: data.rr,\n        meta: data.meta,\n        har,\n        browserLogs,\n        pluginMeta: options?.meta,\n      };\n\n      const dumpDir =\n        options?.targetDirectory &&\n        path.resolve(options.targetDirectory) !== path.resolve(harDir)\n          ? options.targetDirectory\n          : 'dump';\n\n      const resultsFilePath = createDumpFile(dumpData, dumpDir);\n\n      if (options && options.callback) {\n        options.callback(resultsFilePath, dumpData);\n      }\n\n      return null;\n    },\n\n    // called in \"after\" hook\n    cleanup() {\n      removeDir(harDir);\n      return null;\n    },\n  });\n\n  // install cypress-har-generator\n  installHarPlugin(on);\n\n  on('before:browser:launch', (browser, launchOptions) => {\n    // cypress-har-generator uses this event, details here: https://github.com/NeuraLegion/cypress-har-generator/blob/master/README.md?plain=1#L74\n    ensureBrowserFlags(browser, launchOptions);\n\n    // use chrome debugging protocol to listen to console events\n    browserLaunchHandler(browser, launchOptions);\n\n    return launchOptions;\n  });\n\n  on('before:spec', async () => {\n    await recordLogs();\n  });\n\n  return config;\n}\n\nexport default install;\n","import CDP from 'chrome-remote-interface';\nimport Debug from 'debug';\nimport { REMOTE_DEBUGGING_PORT_ARG, SUPPORTED_BROWSERS } from './constants';\nimport { BrowserLog } from './types';\n\nconst debug = Debug('cypress-debugger');\n// eslint-disable-next-line no-console\ndebug.log = console.log.bind(console);\n\nlet cdpClient: CDP.Client;\nlet remoteDebuggingPort: number;\nlet isCdpConnected = false;\n\nlet logs: BrowserLog = {\n  logEntry: [],\n  runtimeConsoleApiCalled: [],\n};\n\nfunction isSupportedBrowser(browser: Cypress.Browser): boolean {\n  return SUPPORTED_BROWSERS.includes(browser?.family);\n}\n\nfunction getPortFromArgs(args: string[]): number | undefined {\n  const param = args.find(\n    (arg) =>\n      arg.slice(0, REMOTE_DEBUGGING_PORT_ARG.length) ===\n      REMOTE_DEBUGGING_PORT_ARG\n  );\n\n  return param ? Number(param.split('=')[1]) : undefined;\n}\n\nfunction parseElectronSwitches(): string[] {\n  const electronArgs = process.env.ELECTRON_EXTRA_LAUNCH_ARGS;\n\n  if (!electronArgs?.includes(REMOTE_DEBUGGING_PORT_ARG)) {\n    throw new Error(\n      `Missing ${REMOTE_DEBUGGING_PORT_ARG} command line switch for Electron browser`\n    );\n  }\n\n  return electronArgs.split(' ');\n}\n\nfunction ensureRdpPort(browser: Cypress.Browser, args: string[]) {\n  // --remote-debugging-port is not set for Electron. See https://docs.cypress.io/api/plugins/browser-launch-api#Modify-browser-launch-arguments\n  // get the command line switches from ELECTRON_EXTRA_LAUNCH_ARGS. See https://docs.cypress.io/api/plugins/browser-launch-api#Modify-Electron-app-switches\n  if (browser.name === 'electron') {\n    // eslint-disable-next-line no-param-reassign\n    args = parseElectronSwitches();\n  }\n\n  let port = getPortFromArgs(args);\n\n  if (!port) {\n    port = 40000 + Math.round(Math.random() * 25000);\n    debug('Remote Debugging Port not set, using a random port: %d', port);\n\n    args.push(`${REMOTE_DEBUGGING_PORT_ARG}=${port}`);\n  }\n\n  return port;\n}\n\nasync function attachCdpHandlers() {\n  debug('Attaching cdp handlers');\n\n  if (!cdpClient) return;\n\n  cdpClient.Log.enable();\n  cdpClient.Log.entryAdded((event) => {\n    logs.logEntry.push(event.entry);\n  });\n\n  cdpClient.Runtime.enable();\n  cdpClient.Runtime.consoleAPICalled((event) => {\n    logs.runtimeConsoleApiCalled.push(event);\n  });\n}\n\nasync function connect() {\n  const MAX_CONNECTION_ATTEMPTS = 5;\n  const CONNECTION_TIMEOUT = 100;\n  let connectionAttempt = 0;\n\n  const tryConnect = async () => {\n    try {\n      cdpClient = await CDP({\n        port: remoteDebuggingPort,\n      });\n\n      debug('Connected to Chrome DevTools Protocol');\n\n      cdpClient.on('disconnect', () => {\n        debug('Chrome DevTools Protocol disconnected');\n        isCdpConnected = false;\n      });\n    } catch (error) {\n      connectionAttempt += 1;\n      if (connectionAttempt === MAX_CONNECTION_ATTEMPTS) {\n        throw new Error(\n          `Failed to connect to Chrome DevTools Protocol after ${\n            CONNECTION_TIMEOUT * connectionAttempt\n          }`\n        );\n      }\n\n      if (connectionAttempt < MAX_CONNECTION_ATTEMPTS) {\n        debug(\n          'Failed to connect to Chrome DevTools Protocol, attempt: %d',\n          connectionAttempt\n        );\n\n        debug('Reconnecting...');\n\n        // eslint-disable-next-line no-promise-executor-return\n        await new Promise((resolve) => setTimeout(resolve, CONNECTION_TIMEOUT));\n        await tryConnect();\n      }\n    }\n  };\n\n  await tryConnect();\n}\n\nexport function browserLaunchHandler(\n  browser: Cypress.Browser,\n  launchOptions: Cypress.BrowserLaunchOptions\n) {\n  const args = launchOptions.args || launchOptions;\n\n  if (!isSupportedBrowser(browser)) {\n    return debug(\n      'Warning: An unsupported browser family was used, output will not be logged to console: %s',\n      browser.family\n    );\n  }\n\n  remoteDebuggingPort = ensureRdpPort(browser, args);\n\n  return launchOptions;\n}\n\nexport async function recordLogs() {\n  if (!remoteDebuggingPort) {\n    throw new Error('Remote Debugging Port not set');\n  }\n\n  if (cdpClient && isCdpConnected) {\n    debug('Closing the current cdp connection');\n    await cdpClient.close();\n  }\n\n  debug('Attempting to connect to Chrome DevTools Protocol');\n  await connect();\n  isCdpConnected = true;\n  await attachCdpHandlers();\n}\n\nexport function getLogs() {\n  return logs;\n}\n\nexport function clearLogs() {\n  logs = {\n    logEntry: [],\n    runtimeConsoleApiCalled: [],\n  };\n}\n","export const REMOTE_DEBUGGING_PORT_ARG = '--remote-debugging-port';\nexport const SUPPORTED_BROWSERS: readonly string[] = ['chromium'];\n","import fs from 'fs';\n\nexport const createDir = (path: string) => {\n  if (!fs.existsSync(path)) {\n    fs.mkdirSync(path, { recursive: true });\n  }\n};\n\nexport const writeFile = (path: string, data: string) => {\n  fs.writeFileSync(path, data);\n};\n\nexport const readFile = (path: string) => fs.readFileSync(path);\n\nexport const removeFile = (path: string) => {\n  fs.unlinkSync(path);\n};\n\nexport const removeDir = (path: string) => {\n  if (fs.existsSync(path)) {\n    fs.rmdirSync(path, { recursive: true });\n  }\n};\n"],"mappings":"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","names":["ensureBrowserFlags","installHarPlugin","path","CDP","Debug","REMOTE_DEBUGGING_PORT_ARG","SUPPORTED_BROWSERS","debug","Debug","cdpClient","remoteDebuggingPort","isCdpConnected","logs","isSupportedBrowser","browser","SUPPORTED_BROWSERS","getPortFromArgs","args","param","arg","REMOTE_DEBUGGING_PORT_ARG","parseElectronSwitches","electronArgs","ensureRdpPort","port","attachCdpHandlers","event","connect","connectionAttempt","tryConnect","CDP","error","resolve","browserLaunchHandler","launchOptions","recordLogs","getLogs","clearLogs","fs","createDir","path","writeFile","data","readFile","removeFile","removeDir","harDir","createDumpFile","data","dumpDir","createDir","specDirPath","path","filename","resultsPath","writeFile","getHar","filePath","readFile","parsed","removeFile","error","install","on","config","options","har","browserLogs","getLogs","clearLogs","dumpData","resultsFilePath","removeDir","installHarPlugin","browser","launchOptions","ensureBrowserFlags","browserLaunchHandler","recordLogs","install_default"]}