"use strict";var M=Object.create;var u=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var G=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var H=(e,t)=>{for(var r in t)u(e,r,{get:t[r],enumerable:!0})},P=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of I(t))!$.call(e,o)&&o!==r&&u(e,o,{get:()=>t[o],enumerable:!(n=B(t,o))||n.enumerable});return e};var m=(e,t,r)=>(r=e!=null?M(G(e)):{},P(t||!e||!e.__esModule?u(r,"default",{value:e,enumerable:!0}):r,e)),U=e=>P(u({},"__esModule",{value:!0}),e);var V={};H(V,{installPlugin:()=>x});module.exports=U(V);var p=require("@neuralegion/cypress-har-generator"),a=m(require("path"));var w=m(require("chrome-remote-interface")),O=m(require("debug"));var l="--remote-debugging-port",h=["chromium"];var i=(0,O.default)("cypress-debugger");i.log=console.log.bind(console);var s,y,f=!1,g={logEntry:[],runtimeConsoleApiCalled:[]};function k(e){return h.includes(e==null?void 0:e.family)}function j(e){let t=e.find(r=>r.slice(0,l.length)===l);return t?Number(t.split("=")[1]):void 0}function X(){let e=process.env.ELECTRON_EXTRA_LAUNCH_ARGS;if(!(e!=null&&e.includes(l)))throw new Error(`Missing ${l} command line switch for Electron browser`);return e.split(" ")}function W(e,t){e.name==="electron"&&(t=X());let r=j(t);return r||(r=4e4+Math.round(Math.random()*25e3),i("Remote Debugging Port not set, using a random port: %d",r),t.push(`${l}=${r}`)),r}async function J(){i("Attaching cdp handlers"),s&&(s.Log.enable(),s.Log.entryAdded(e=>{g.logEntry.push(e.entry)}),s.Runtime.enable(),s.Runtime.consoleAPICalled(e=>{g.runtimeConsoleApiCalled.push(e)}))}async function q(){let r=0,n=async()=>{try{s=await(0,w.default)({port:y}),i("Connected to Chrome DevTools Protocol"),s.on("disconnect",()=>{i("Chrome DevTools Protocol disconnected"),f=!1})}catch(o){if(r+=1,r===5)throw new Error(`Failed to connect to Chrome DevTools Protocol after ${100*r}`);r<5&&(i("Failed to connect to Chrome DevTools Protocol, attempt: %d",r),i("Reconnecting..."),await new Promise(d=>setTimeout(d,100)),await n())}};await n()}function D(e,t){let r=t.args||t;return k(e)?(y=W(e,r),t):i("Warning: An unsupported browser family was used, output will not be logged to console: %s",e.family)}async function N(){if(!y)throw new Error("Remote Debugging Port not set");s&&f&&(i("Closing the current cdp connection"),await s.close()),i("Attempting to connect to Chrome DevTools Protocol"),await q(),f=!0,await J()}function _(){return g}function A(){g={logEntry:[],runtimeConsoleApiCalled:[]}}var c=m(require("fs")),C=e=>{c.default.existsSync(e)||c.default.mkdirSync(e,{recursive:!0})},R=(e,t)=>{c.default.writeFileSync(e,t)},S=e=>c.default.readFileSync(e),b=e=>{c.default.unlinkSync(e)},v=e=>{c.default.existsSync(e)&&c.default.rmdirSync(e,{recursive:!0})};var T="dump_har",z=(e,t)=>{C(t);let r=a.default.join(t,e.meta.spec);C(r);let n=`${e.meta.test.join(" -- ")} (${e.meta.state})${e.meta.retryAttempt>0?` (attempt ${e.meta.retryAttempt+1})`:""}`,o=a.default.join(r,`${n}.json`);return R(o,JSON.stringify(e,null,2)),o},K=e=>{try{let t=a.default.join(T,e),r=S(t),n=JSON.parse(r.toString("utf-8"));return b(t),n}catch(t){return null}};function Q(e,t,r){return r!=null&&r.failedTestsOnly&&(t.env.__cypress_debugger_failedTestsOnly=!0),e("task",{dumpEvents(n){let o=K(n.harFilename),d=_();A();let E={id:n.id,cy:n.cy,rr:n.rr,meta:n.meta,har:o,browserLogs:d,pluginMeta:r==null?void 0:r.meta},L=r!=null&&r.targetDirectory&&a.default.resolve(r.targetDirectory)!==a.default.resolve(T)?r.targetDirectory:"dump",F=z(E,L);return r&&r.callback&&r.callback(F,E),null},cleanup(){return v(T),null}}),(0,p.install)(e),e("before:browser:launch",(n,o)=>((0,p.ensureBrowserFlags)(n,o),D(n,o),o)),e("before:spec",async()=>{await N()}),t}var x=Q;0&&(module.exports={installPlugin});
//# sourceMappingURL=index.js.map