import { RunContextData, TestState, CypressEvent, RRWebEvent, HttpArchiveLog } from '@currents/cypress-debugger-support';

type LogEntryLevel = 'verbose' | 'info' | 'warning' | 'error';
type LogEntrySource = 'xml' | 'javascript' | 'network' | 'storage' | 'appcache' | 'rendering' | 'security' | 'deprecation' | 'worker' | 'violation' | 'intervention' | 'recommendation' | 'other';
type RuntimeCallFrame = {
    functionName: string;
    scriptId: string;
    url: string;
    lineNumber: number;
    columnNumber: number;
};
type RuntimeStackTraceId = {
    id: string;
    debuggerId?: string;
};
type RuntimeStackTrace = {
    description?: string;
    callFrames: RuntimeCallFrame[];
    parent?: RuntimeStackTrace;
    parentId?: RuntimeStackTraceId;
};
type RuntimeRemoteObject = {
    type: 'object' | 'function' | 'undefined' | 'string' | 'number' | 'boolean' | 'symbol' | 'bigint';
    value?: string;
};
type LogEntry = {
    source: LogEntrySource;
    level: LogEntryLevel;
    text: string;
    category?: 'cors';
    timestamp: number;
    url?: string;
    lineNumber?: number;
    stackTrace?: RuntimeStackTrace;
    networkRequestId?: string;
    workerId?: string;
    args?: Array<RuntimeRemoteObject>;
};
type RuntimeConsoleAPICalled = {
    type: 'log' | 'debug' | 'info' | 'error' | 'warning' | 'dir' | 'dirxml' | 'table' | 'trace' | 'clear' | 'startGroup' | 'startGroupCollapsed' | 'endGroup' | 'assert' | 'profile' | 'profileEnd' | 'count' | 'timeEnd';
    args: Array<RuntimeRemoteObject>;
    executionContextId: number;
    timestamp: number;
    stackTrace?: RuntimeStackTrace;
    context?: string;
};
type ConsoleMessage = {
    source?: 'xml' | 'javascript' | 'network' | 'console-api' | 'storage' | 'appcache' | 'rendering' | 'security' | 'other' | 'deprecation' | 'worker';
    level?: 'log' | 'warning' | 'error' | 'debug' | 'info';
    text?: string;
    url?: string;
    line?: number;
    column?: number;
};
type BrowserLog = {
    logEntry: LogEntry[];
    runtimeConsoleApiCalled: RuntimeConsoleAPICalled[];
};
type TestExecutionResult = {
    id: string;
    meta: RunContextData & {
        state: TestState;
    };
    cy: CypressEvent[];
    rr: RRWebEvent[];
    har: HttpArchiveLog | null;
    browserLogs: BrowserLog;
    pluginMeta?: Record<string, unknown>;
};
type PluginOptions = {
    meta?: Record<string, unknown>;
    targetDirectory?: string;
    failedTestsOnly?: boolean;
    callback?: (path: string, result: TestExecutionResult) => void;
};

declare function install(on: Cypress.PluginEvents, config: Cypress.PluginConfigOptions, options?: PluginOptions): Cypress.PluginConfigOptions;

export { BrowserLog, ConsoleMessage, LogEntry, LogEntryLevel, LogEntrySource, PluginOptions, RuntimeCallFrame, RuntimeConsoleAPICalled, RuntimeRemoteObject, RuntimeStackTrace, RuntimeStackTraceId, TestExecutionResult, install as installPlugin };
