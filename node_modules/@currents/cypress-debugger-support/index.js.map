{"version":3,"sources":["../src/index.ts","../src/events/container.ts","../src/env/perf.ts","../src/logger.ts","../src/rr/index.ts","../src/uuid.ts","../src/events/enhancer.ts","../src/events/event.ts","../src/cy/globalHandlers.ts","../src/cy/runContext.ts","../src/cy/testHandlers.ts","../src/cy/cy.ts"],"sourcesContent":["import { attachHandlers } from './cy';\n\nexport type { RunContextData } from './cy/runContext';\nexport * from './events/event';\nexport { attachHandlers };\n","import { last } from 'lodash';\nimport { getEnvironmentLifetime } from '../env/perf';\nimport { warn } from '../logger';\nimport { getRRNodes } from '../rr';\nimport { uuid } from '../uuid';\nimport {\n  enhanceCypressEvent,\n  enhanceEvent,\n  formatCypressEvent,\n} from './enhancer';\nimport {\n  CypressEvent,\n  CypressEventMeta,\n  CypressRawEvent,\n  RRWebEvent,\n  RRWebRawEvent,\n} from './event';\n\nconst cypressEvents: CypressEvent[] = [];\nconst rrEvents: RRWebEvent[] = [];\nconst cypressEventsMap = new Map<string, number>();\n\nexport const reset = () => {\n  cypressEventsMap.clear();\n  cypressEvents.splice(0, cypressEvents.length);\n  rrEvents.splice(0, rrEvents.length);\n};\n\nexport const getEvents = () => ({\n  testId: uuid(),\n  events: {\n    cy: cypressEvents,\n    rr: rrEvents,\n  },\n});\n\nexport const getLastRREventId = () => last(rrEvents)?.id ?? null;\n\nexport const addCypressEvent = (event: CypressRawEvent) => {\n  const meta: CypressEventMeta = {\n    before: {\n      rrId: getLastRREventId(),\n      rrNodes: getRRNodes(event.$el),\n    },\n    after: {\n      rrId: null,\n      rrNodes: [],\n    },\n  };\n  const i = cypressEvents.push(\n    enhanceCypressEvent(formatCypressEvent(event), meta)\n  );\n  cypressEventsMap.set(event.id, i - 1);\n};\n\nexport const updateCypressEvent = (id: string, update: CypressRawEvent) => {\n  const i = cypressEventsMap.get(id);\n  if (!i) {\n    return;\n  }\n  const event = cypressEvents[i];\n  if (!event) {\n    warn('Registered cypress event not found in event container');\n    return;\n  }\n\n  event.duration = getEnvironmentLifetime() - event.offset;\n  event.payload = formatCypressEvent(update);\n  event.meta.after = {\n    rrId: getLastRREventId(),\n    rrNodes: getRRNodes(update.$el),\n  };\n};\n\nexport const addRREvent = (event: RRWebRawEvent) =>\n  rrEvents.push(enhanceEvent(event));\n","export function getEnvironmentLifetime(): number {\n  try {\n    if (window?.performance) {\n      return window.performance.now();\n    }\n    // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires\n    return require('node:perf_hooks').performance.now() as number;\n  } catch (e) {\n    return 0;\n  }\n}\n","/* eslint-disable no-console */\nexport const error = (...args: unknown[]) => {\n  console.error(`🔥`, ...args);\n};\n\nexport const warn = (...args: unknown[]) => {\n  console.warn(`⚠️`, ...args);\n};\n\nexport const debug = (...args: unknown[]) => {\n  console.debug(`🟡`, ...args);\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport type { eventWithTime } from '@rrweb/types';\nimport type { record } from 'rrweb';\nimport { debug, error } from '../logger';\n\n// @ts-ignore\nimport rrSrc from './releases/2.0.0-alpha.4.js.src';\n\nlet rrWebReb: typeof record | null = null;\nconst getRRWeb = () => rrWebReb;\n\nexport function injectRROnce(\n  window: Window,\n  onEmit: (e: eventWithTime, isCheckout?: boolean | undefined) => void\n) {\n  // @ts-ignore\n  if (window.rrwebRecord) {\n    debug('rrwebRecord already injected.');\n    return;\n  }\n\n  const r = window.document.createElement('script');\n  r.innerHTML = rrSrc;\n  r.type = 'text/javascript';\n\n  window.document.head.appendChild(r);\n  // @ts-ignore\n  if (!window.rrwebRecord) {\n    error('Failed to load rrwebRecord after injecting script.');\n    return;\n  }\n  // @ts-ignore\n  (window.rrwebRecord as typeof record)({\n    emit: onEmit,\n  });\n\n  // @ts-ignore\n  rrWebReb = window.rrwebRecord as typeof record;\n}\n\nexport function getRRNodes(els?: unknown) {\n  const nodes: HTMLElement[] = [];\n  (\n    els as {\n      each: (fn: (i: number, el: HTMLElement) => void) => void;\n    }\n  )?.each((_: number, el: HTMLElement) => nodes.push(el));\n  return nodes\n    .map((el) => getRRWeb()?.mirror.getId(el))\n    .filter((i) => !!i && i > -1)\n    .filter(Boolean) as number[];\n}\n","export { v4 as uuid } from '@lukeed/uuid';\n","import { pick } from 'lodash';\nimport { getEnvironmentLifetime } from '../env/perf';\nimport { uuid } from '../uuid';\nimport {\n  BaseEvent,\n  CypressEvent,\n  CypressEventMeta,\n  CypressRawEvent,\n  RRWebEvent,\n  RRWebRawEvent,\n} from './event';\n\nexport const enhanceEvent = <T>(\n  event: T\n): BaseEvent & {\n  payload: T;\n} => ({\n  payload: event,\n  id: uuid(),\n  timestamp: Date.now(),\n  offset: getEnvironmentLifetime(),\n  duration: 0,\n});\n\nexport const enhanceCypressEvent = (\n  event: CypressRawEvent,\n  meta: CypressEventMeta\n): CypressEvent => ({\n  ...enhanceEvent(event),\n  meta,\n});\n\nexport const enhanceRREvent = (event: RRWebRawEvent): RRWebEvent =>\n  enhanceEvent(event);\n\nexport const formatCypressEvent = (\n  event: CypressRawEvent\n): Pick<\n  CypressRawEvent,\n  | 'alias'\n  | 'aliasType'\n  | 'chainerId'\n  | 'displayName'\n  | 'ended'\n  | 'err'\n  | 'event'\n  | 'highlightAttr'\n  | 'hookId'\n  | 'id'\n  | 'numElements'\n  | 'instrument'\n  | 'message'\n  | 'method'\n  | 'name'\n  | 'state'\n  | 'testCurrentRetry'\n  | 'testId'\n  | 'totalTime'\n  | 'type'\n  | 'url'\n  | 'viewportHeight'\n  | 'viewportWidth'\n  | 'wallClockStartedAt'\n> =>\n  // TODO: figure out consoleProps, renderProps and $el\n  // const consoleProps = pick(event.consoleProps, [\"Command\", \"Elements\", \"Selector\"]);\n\n  ({\n    ...pick(event, [\n      'alias',\n      'aliasType',\n      'chainerId',\n      'displayName',\n      'ended',\n      'err',\n      'event',\n      'highlightAttr',\n      'hookId',\n      'id',\n      'numElements',\n      'instrument',\n      'message',\n      'method',\n      'name',\n      'state',\n      'testCurrentRetry',\n      'testId',\n      'totalTime',\n      'type',\n      'url',\n      'viewportHeight',\n      'viewportWidth',\n      'wallClockStartedAt',\n    ]),\n  });\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { eventWithTime } from '@rrweb/types';\n\nexport enum TestState {\n  Failed = 'failed',\n  Passed = 'passed',\n  Pending = 'pending',\n  Skipped = 'skipped',\n}\n\nexport type RRWebRawEvent = eventWithTime;\nexport type CypressRawEvent = {\n  chainerId?: string;\n  ended?: boolean;\n  event: boolean;\n  hookId: string;\n  id: string;\n  instrument: string;\n  message: string;\n  name: string;\n  state: TestState;\n  testCurrentRetry: number;\n  testId: string;\n  type?: string;\n  url: string;\n  viewportHeight: number;\n  viewportWidth: number;\n  wallClockStartedAt: string;\n  [x: string]: unknown;\n};\n\nexport type RawEvent = CypressRawEvent | RRWebRawEvent;\n\nexport type CypressEventMeta = {\n  before: {\n    rrId: string | null;\n    rrNodes: number[];\n  };\n  after: {\n    rrId: string | null;\n    rrNodes: number[];\n  };\n};\n\ninterface Node {\n  type: number;\n  childNodes?: ChildNodesEntity[] | null;\n  compatMode?: string;\n  id: number;\n}\n\ninterface ChildNodesEntity extends Node {\n  tagName?: string;\n  isStyle?: boolean | null;\n  textContent?: string | null;\n  isSVG?: boolean | null;\n  attributes?: Attributes | null;\n}\n\ninterface Attributes {\n  [key: string]: unknown;\n}\n\nexport type BaseEvent = {\n  id: string;\n  timestamp: number;\n  offset: number;\n  duration: number;\n};\nexport type CypressEvent = BaseEvent & {\n  payload: CypressRawEvent;\n  meta: CypressEventMeta;\n};\n\nexport type RRWebEvent = BaseEvent & {\n  payload: RRWebRawEvent;\n};\n\nexport type Event = CypressEvent | RRWebEvent;\n\nexport enum EventType {\n  RRWeb = 'rr',\n  Cypress = 'cy',\n}\n\nexport interface HttpArchiveLog {\n  log: Log;\n}\n\ninterface Log {\n  version: string;\n  pages?: unknown[] | null;\n  creator: Creator;\n  entries: HttpArchiveEntry[];\n}\n\ninterface Creator {\n  name: string;\n  version: string;\n  comment: string;\n}\n\nexport interface HttpArchiveEntry {\n  startedDateTime: string;\n  time: number;\n  timings: Timings;\n  request: HttpArchiveEntryRequest;\n  response: HttpArchiveEntryResponse;\n  cache: Cache;\n  serverIPAddress: string;\n  _priority: string;\n  _resourceType: string;\n  _webSocketMessages?: unknown[] | null;\n  _eventSourceMessages?: unknown[] | null;\n  connection?: string;\n}\n\ninterface Timings {\n  blocked: number;\n  dns: number;\n  ssl: number;\n  connect: number;\n  send: number;\n  wait: number;\n  receive: number;\n}\n\nexport interface HttpArchiveEntryRequest {\n  method: string;\n  url: string;\n  httpVersion: string;\n  headers?: HeadersEntity[] | null;\n  queryString?: QueryStringEntity[] | null;\n  cookies?: unknown[] | null;\n  headersSize: number;\n  bodySize: number;\n}\n\ninterface Entity {\n  name: string;\n  value: string;\n}\n\nexport type HeadersEntity = Entity;\nexport type QueryStringEntity = Entity;\n\nexport interface HttpArchiveEntryResponse {\n  status: number;\n  statusText: string;\n  httpVersion: string;\n  headers?: HeadersEntity[] | null;\n  cookies?: unknown[] | null;\n  content: Content;\n  redirectURL: string;\n  headersSize: number;\n  bodySize: number;\n  _transferSize: number;\n}\n\ninterface Content {\n  size: number;\n  mimeType: string;\n  compression?: number;\n  text: string;\n}\n\ninterface Cache {\n  [key: string]: unknown;\n}\n","import { CypressRawEvent, eventsContainer } from '../events';\nimport { addCypressEvent, updateCypressEvent } from '../events/container';\nimport { injectRROnce } from '../rr';\n\n// https://docs.cypress.io/api/events/catalog-of-events#App-Events\nexport function onBeforeWindowLoad(window: Window) {\n  injectRROnce(window, eventsContainer.addRREvent);\n}\n\nexport function onLogAdded(e: CypressRawEvent) {\n  addCypressEvent(e);\n}\n\nexport function onLogChanged(e: CypressRawEvent) {\n  updateCypressEvent(e.id, e);\n}\n\nexport function onHook() {}\n","export interface RunContextData {\n  spec: string;\n  test: string[];\n  retryAttempt: number;\n}\n\nexport function getRunContext(): RunContextData {\n  return {\n    spec: Cypress.spec.name,\n    test: Cypress.currentTest.titlePath,\n    retryAttempt: Cypress.currentRetry,\n  };\n}\n","import { eventsContainer } from '../events';\nimport { injectRROnce } from '../rr';\nimport { getRunContext } from './runContext';\n\nexport function handleBefore() {\n  cy.window().then(() => {});\n}\n\nexport function handleAfter() {\n  // remove har directory\n  cy.task('cleanup');\n}\n\nexport function handleBeforeEach() {\n  cy.window().then((window) => {\n    injectRROnce(window, eventsContainer.addRREvent);\n  });\n\n  cy.recordHar();\n}\n\nexport function handleAfterEach() {\n  const eventsBatch = eventsContainer.getEvents();\n  const harFilename = `${eventsBatch.testId}.raw.json`;\n\n  // @ts-ignore\n  const { state } = this.currentTest;\n  const reportFailedTestsOnly = !!Cypress.env(\n    '__cypress_debugger_failedTestsOnly'\n  );\n\n  if (state === 'passed' && reportFailedTestsOnly) {\n    cy.log('🎥 skipping trace generation for a non-failed test');\n    // do not save the recorded network logs\n    cy.disposeOfHar();\n    // do not save reports\n    return;\n  }\n\n  // create dump file for network data\n  cy.saveHar({\n    outDir: 'dump_har',\n    fileName: harFilename,\n  });\n\n  // get cy and rr events + test meta\n  cy.task('dumpEvents', {\n    id: eventsBatch.testId,\n    meta: { ...getRunContext(), state },\n    cy: eventsBatch.events.cy,\n    rr: eventsBatch.events.rr,\n    harFilename,\n  }).then(() => eventsContainer.reset());\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n/// <reference types=\"cypress\" />\n\nimport {\n  onBeforeWindowLoad,\n  onHook,\n  onLogAdded,\n  onLogChanged,\n} from './globalHandlers';\n\nimport {\n  handleAfter,\n  handleAfterEach,\n  handleBefore,\n  handleBeforeEach,\n} from './testHandlers';\n\nexport function attachHandlers() {\n  // register commands to generate HAR files\n  // eslint-disable-next-line global-require\n  require('@neuralegion/cypress-har-generator/commands');\n\n  Cypress.on('window:before:load', onBeforeWindowLoad);\n  Cypress.on('log:added', onLogAdded);\n  Cypress.on('log:changed', onLogChanged);\n\n  // @ts-ignore\n  Cypress.mocha.getRunner().on('hook', onHook);\n\n  before(handleBefore);\n  beforeEach(handleBeforeEach);\n\n  after(handleAfter);\n  afterEach(handleAfterEach);\n}\n"],"mappings":"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","names":["src_exports","__export","EventType","TestState","attachHandlers","__toCommonJS","container_exports","__export","addCypressEvent","addRREvent","getEvents","getLastRREventId","reset","updateCypressEvent","import_lodash","getEnvironmentLifetime","error","args","warn","debug","rrWebReb","getRRWeb","injectRROnce","window","onEmit","debug","alpha_4_js_default","error","getRRNodes","els","nodes","_","el","_a","i","import_uuid","import_lodash","enhanceEvent","event","getEnvironmentLifetime","enhanceCypressEvent","meta","formatCypressEvent","event","cypressEvents","rrEvents","cypressEventsMap","reset","getEvents","getLastRREventId","_a","_b","addCypressEvent","event","meta","getRRNodes","i","enhanceCypressEvent","formatCypressEvent","updateCypressEvent","id","update","warn","getEnvironmentLifetime","addRREvent","enhanceEvent","TestState","EventType","onBeforeWindowLoad","window","injectRROnce","container_exports","onLogAdded","addCypressEvent","onLogChanged","updateCypressEvent","onHook","getRunContext","handleBefore","handleAfter","handleBeforeEach","window","injectRROnce","container_exports","handleAfterEach","eventsBatch","harFilename","state","reportFailedTestsOnly","getRunContext","attachHandlers","onBeforeWindowLoad","onLogAdded","onLogChanged","onHook","handleBefore","handleBeforeEach","handleAfter","handleAfterEach"]}