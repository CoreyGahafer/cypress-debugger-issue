import { eventWithTime } from '@rrweb/types';

declare function attachHandlers(): void;

interface RunContextData {
    spec: string;
    test: string[];
    retryAttempt: number;
}

declare enum TestState {
    Failed = "failed",
    Passed = "passed",
    Pending = "pending",
    Skipped = "skipped"
}
type RRWebRawEvent = eventWithTime;
type CypressRawEvent = {
    chainerId?: string;
    ended?: boolean;
    event: boolean;
    hookId: string;
    id: string;
    instrument: string;
    message: string;
    name: string;
    state: TestState;
    testCurrentRetry: number;
    testId: string;
    type?: string;
    url: string;
    viewportHeight: number;
    viewportWidth: number;
    wallClockStartedAt: string;
    [x: string]: unknown;
};
type RawEvent = CypressRawEvent | RRWebRawEvent;
type CypressEventMeta = {
    before: {
        rrId: string | null;
        rrNodes: number[];
    };
    after: {
        rrId: string | null;
        rrNodes: number[];
    };
};
type BaseEvent = {
    id: string;
    timestamp: number;
    offset: number;
    duration: number;
};
type CypressEvent = BaseEvent & {
    payload: CypressRawEvent;
    meta: CypressEventMeta;
};
type RRWebEvent = BaseEvent & {
    payload: RRWebRawEvent;
};
type Event = CypressEvent | RRWebEvent;
declare enum EventType {
    RRWeb = "rr",
    Cypress = "cy"
}
interface HttpArchiveLog {
    log: Log;
}
interface Log {
    version: string;
    pages?: unknown[] | null;
    creator: Creator;
    entries: HttpArchiveEntry[];
}
interface Creator {
    name: string;
    version: string;
    comment: string;
}
interface HttpArchiveEntry {
    startedDateTime: string;
    time: number;
    timings: Timings;
    request: HttpArchiveEntryRequest;
    response: HttpArchiveEntryResponse;
    cache: Cache;
    serverIPAddress: string;
    _priority: string;
    _resourceType: string;
    _webSocketMessages?: unknown[] | null;
    _eventSourceMessages?: unknown[] | null;
    connection?: string;
}
interface Timings {
    blocked: number;
    dns: number;
    ssl: number;
    connect: number;
    send: number;
    wait: number;
    receive: number;
}
interface HttpArchiveEntryRequest {
    method: string;
    url: string;
    httpVersion: string;
    headers?: HeadersEntity[] | null;
    queryString?: QueryStringEntity[] | null;
    cookies?: unknown[] | null;
    headersSize: number;
    bodySize: number;
}
interface Entity {
    name: string;
    value: string;
}
type HeadersEntity = Entity;
type QueryStringEntity = Entity;
interface HttpArchiveEntryResponse {
    status: number;
    statusText: string;
    httpVersion: string;
    headers?: HeadersEntity[] | null;
    cookies?: unknown[] | null;
    content: Content;
    redirectURL: string;
    headersSize: number;
    bodySize: number;
    _transferSize: number;
}
interface Content {
    size: number;
    mimeType: string;
    compression?: number;
    text: string;
}
interface Cache {
    [key: string]: unknown;
}

export { BaseEvent, CypressEvent, CypressEventMeta, CypressRawEvent, Event, EventType, HeadersEntity, HttpArchiveEntry, HttpArchiveEntryRequest, HttpArchiveEntryResponse, HttpArchiveLog, QueryStringEntity, RRWebEvent, RRWebRawEvent, RawEvent, RunContextData, TestState, attachHandlers };
